#! /usr/bin/env python

from pathlib import Path
import advent_of_code as adv

data = adv.input(Path(__file__).parent.name, str)


def digit1(w, z):
    x = (z % 26) + 10  # 10
    z = z // 1  # 0
    x = 0 if x == w else 1  # 1
    y = 25 * x + 1  # 26
    z *= y  # 0
    y = (w + 15) * x  # 16 -> 24  d1 + 15
    z += y
    return z  # 16 -> 24  d1 + 15


def digit2(w, z):
    x = (z % 26) + 12  # 28 -> 36;  d1 + 27
    z = z // 1  # 16 -> 24;  d1 + 15
    x = 0 if x == w else 1  # 1
    y = 25 * x + 1  # 26
    z *= y  # (d1 + 15) * 26
    y = (w + 8) * x  # 9 -> 17; d2 + 8
    z += y  # (d1 + 15) * 26 + (d2 + 8)
    return z  # (d1 + 15) * 26 + (d2 + 8)


def digit3(w, z):
    x = (z % 26) + 15  # d2 + 23
    z = z // 1  # (d1 + 15) * 26 + (d2 + 8)
    x = 0 if x == w else 1  # 1
    y = 25 * x + 1  # 26
    z *= y  # (d1 + 15) * 26**2 + (d2 + 8) * 26
    y = (w + 2) * x  # d3 + 2
    z += y
    return z  # (d1 + 15) * 26**2 + (d2 + 8) * 26 + (d3 + 2)


def digit4(w, z):
    x = (z % 26) - 9  # d3 - 7
    z = z // 26  # (d1 + 15) * 26 + (d2 + 8)
    x = 0 if x == w else 1  # 0 if (d3, d4) in D_3_4 else 1
    y = 25 * x + 1  # 1 if (d3, d4) in D_3_4 else 26
    z *= y  # (d1 + 15) * 26 + (d2 + 8) if (d3, d4) in D_3_4 else (d1 + 15) * 26**2 + (d2 + 8) * 26
    y = (w + 6) * x  # 0 if (d3, d4) in D_3_4 else (d4 + 6)
    z += y
    return z  # (d1 + 15) * 26 + (d2 + 8) if (d3, d4) in D_3_4 else (d1 + 15) * 26**2 + (d2 + 8) * 26 + (d4 + 6)


def digit5(w, z):
    x = (z % 26) + 15  # d2 + 23 if (d3, d4) in D_3_4 else d4 + 21
    z = z // 1
    x = 0 if x == w else 1  # 1
    y = 25 * x + 1  # 26
    z *= y
    y = (w + 13) * x  # d5 + 13
    z += y
    return z  # (d1+15)*26**2 + (d2+8)*26**1 + (d5+13)*26**0 if (d3, d4) in D_3_4 else (d1+15)*26**3 + (d2+8)*26**2 + (d4+6)*26**1 + (d5+13)*26**0


def digit6(w, z):
    x = (z % 26) + 10  # d5 + 23
    z = z // 1
    x = 0 if x == w else 1  # 1
    y = 25 * x + 1  # 26
    z *= y
    y = (w + 4) * x  # d6 + 4
    z += y
    return z  # (d1+15)*26**3 + (d2+8)*26**2 + (d5+13)*26**1 + (d6+4)*26**0 if (d3, d4) in D_3_4 else (d1+15)*26**4 + (d2+8)*26**3 + (d4+6)*26**2 + (d5+13)*26**1 + (d6+4)*26**0


def digit7(w, z):
    x = (z % 26) + 14  # d6 + 18
    z = z // 1
    x = 0 if x == w else 1  # 1
    y = 25 * x + 1  # 26
    z *= y
    y = (w + 1) * x  # d7 + 1
    z += y
    return z  # (d1+15)*26**4 + (d2+8)*26**3 + (d5+13)*26**2 + (d6+4)*26**1 + (d7+1)*26**0 if (d3, d4) in D_3_4 else (d1+15)*26**5 + (d2+8)*26**4 + (d4+6)*26**3 + (d5+13)*26**2 + (d6+4)*26**1 + (d7+1)*26**0


def digit8(w, z):
    x = (z % 26) - 5  # d7 - 4
    z = z // 26  # (d1+15)*26**3 + (d2+8)*26**2 + (d5+13)*26**1 + (d6+4)*26**0 if (d3, d4) in D_3_4 else (d1+15)*26**4 + (d2+8)*26**3 + (d4+6)*26**2 + (d5+13)*26**1 + (d6+4)*26**0
    x = 0 if x == w else 1  # 0 if (d7, d8) in D_7_8 else 1
    y = 25 * x + 1  # 1 if (d7, d8) in D_7_8 else 26
    z *= y
    y = (w + 9) * x  # 0 if (d7, d8) in D_7_8 else (d8 + 9)
    z += y
    return z  # ((d1+15)*26**3 + (d2+8)*26**2 + (d5+13)*26**1 + (d6+4)*26**0 if (d3, d4) in D_3_4 else (d1+15)*26**4 + (d2+8)*26**3 + (d4+6)*26**2 + (d5+13)*26**1 + (d6+4)*26**0) if (d7, d8) in D_7_8 else ((d1+15)*26**4 + (d2+8)*26**3 + (d5+13)*26**2 + (d6+4)*26**1 + (d8+9)*26**0 if (d3, d4) in D_3_4 else (d1+15)*26**5 + (d2+8)*26**4 + (d4+6)*26**3 + (d5+13)*26**2 + (d6+4)*26**1 + (d8+9)*26**0)


def digit9(w, z):
    x = (z % 26) + 14  # (d6 + 18) if (d7, d8) in D_7_8 else (d8 + 23)
    z = z // 1
    x = 0 if x == w else 1  # 1
    y = 25 * x + 1  # 26
    z *= y
    y = (w + 5) * x  # d9 + 5
    z += y
    return z  # ((d1+15)*26**4 + (d2+8)*26**3 + (d5+13)*26**2 + (d6+4)*26**1 + (d9+5)*26**0 if (d3, d4) in D_3_4 else (d1+15)*26**5 + (d2+8)*26**4 + (d4+6)*26**3 + (d5+13)*26**2 + (d6+4)*26**1 + (d9+5)*26**0) if (d7, d8) in D_7_8 else ((d1+15)*26**5 + (d2+8)*26**4 + (d5+13)*26**3 + (d6+4)*26**2 + (d8+9)*26**1 + (d9+5)*26**0 if (d3, d4) in D_3_4 else (d1+15)*26**6 + (d2+8)*26**5 + (d4+6)*26**4 + (d5+13)*26**3 + (d6+4)*26**2 + (d8+9)*26**1 + (d9+5)*26**0)


def digit10(w, z):
    x = (z % 26) - 7  # d9 - 2
    z = z // 26
    x = 0 if x == w else 1
    y = 25 * x + 1
    z *= y
    y = (w + 13) * x  # 0 if (d9, d10) in D_9_10 else d10 + 13
    z += y
    return z  # (((d1+15)*26**3 + (d2+8)*26**2 + (d5+13)*26**1 + (d6+4)*26**0 if (d3, d4) in D_3_4 else (d1+15)*26**4 + (d2+8)*26**3 + (d4+6)*26**2 + (d5+13)*26**1 + (d6+4)*26**0) if (d7, d8) in D_7_8 else ((d1+15)*26**4 + (d2+8)*26**3 + (d5+13)*26**2 + (d6+4)*26**1 + (d8+9)*26**0 if (d3, d4) in D_3_4 else (d1+15)*26**5 + (d2+8)*26**4 + (d4+6)*26**3 + (d5+13)*26**2 + (d6+4)*26**1 + (d8+9)*26**0)) if (d9, d10) in D_9_10 else (((d1+15)*26**4 + (d2+8)*26**3 + (d5+13)*26**2 + (d6+4)*26**1 + (d10+13)*26**0 if (d3, d4) in D_3_4 else (d1+15)*26**5 + (d2+8)*26**4 + (d4+6)*26**3 + (d5+13)*26**2 + (d6+4)*26**1 + (d10+13)*26**0) if (d7, d8) in D_7_8 else ((d1+15)*26**5 + (d2+8)*26**4 + (d5+13)*26**3 + (d6+4)*26**2 + (d8+9)*26**1 + (d10+13)*26**0 if (d3, d4) in D_3_4 else (d1+15)*26**6 + (d2+8)*26**5 + (d4+6)*26**4 + (d5+13)*26**3 + (d6+4)*26**2 + (d8+9)*26**1 + (d10+13)*26**0))


def digit11(w, z):
    x = (z % 26) - 12  # ((d6 - 8) if (d7, d8) in D_7_8 else (d8 - 3)) if (d9, d10) in D_9_10 else (d10 + 1)
    z = z // 26
    x = 0 if x == w else 1
    y = 25 * x + 1
    z *= y
    y = (w + 9) * x
    z += y
    return z


"""
if (d9, d10) in D_9_10:
    if (d7, d8) in D_7_8:
        if (d6, d11) in D_6_11:
            if (d3, d4) in D_3_4:
                z = (d1+15)*26**2 + (d2+8)*26**1 +                 (d5+13)*26**0
            else:
                z = (d1+15)*26**3 + (d2+8)*26**2 + (d4+6)**26**1 + (d5+13)*26**0
        else:
            if (d3, d4) in D_3_4:
                z = (d1+15)*26**3 + (d2+8)*26**2 +                 (d5+13)*26**1 + (d11+9)*26**0
            else:
                # invalid
                z = (d1+15)*26**4 + (d2+8)*26**3 + (d4+6)**26**2 + (d5+13)*26**1 + (d11+9)*26**0
    else:
        if (d8, d11) in D_8_11:
            if (d3, d4) in D_3_4:
                z = (d1+15)*26**3 + (d2+8)*26**2 +                 (d5+13)*26**1 + (d6+4)*26**0
            else:
                # invalid
                z = (d1+15)*26**4 + (d2+8)*26**3 + (d4+6)**26**2 + (d5+13)*26**1 + (d6+4)*26**0
        else:
            # invalid
            if (d3, d4) in D_3_4:
                z = (d1+15)*26**4 + (d2+8)*26**3 +                 (d5+13)*26**2 + (d6+4)*26**1 + (d11+9)*26**0
            else:
                z = (d1+15)*26**5 + (d2+8)*26**4 + (d4+6)**26**3 + (d5+13)*26**2 + (d6+4)*26**1 + (d11+9)*26**0
else:
    if (d10, d11) in D_10_11:
        if (d7, d8) in D_7_8:
            if (d3, d4) in D_3_4:
                z = (d1+15)*26**3 + (d2+8)*26**2 +                 (d5+13)*26**1 + (d6+4)*26**0
            else:
                # invalid
                z = (d1+15)*26**4 + (d2+8)*26**3 + (d4+6)**26**2 + (d5+13)*26**1 + (d6+4)*26**0
        else:
            # invalid
            if (d3, d4) in D_3_4:
                z = (d1+15)*26**4 + (d2+8)*26**3 +                 (d5+13)*26**2 + (d6+4)*26**1 + (d8+9)*26**0
            else:
                z = (d1+15)*26**5 + (d2+8)*26**4 + (d4+6)**26**3 + (d5+13)*26**2 + (d6+4)*26**1 + (d8+9)*26**0
    else:
        # invalid
        if (d7, d8) in D_7_8:
            if (d3, d4) in D_3_4:
                z = (d1+15)*26**4 + (d2+8)*26**3 +                 (d5+13)*26**2 + (d6+4)*26**1 +                (d11+9)*26**0
            else:
                z = (d1+15)*26**5 + (d2+8)*26**4 + (d4+6)**26**3 + (d5+13)*26**2 + (d6+4)*26**1 +                (d11+9)*26**0
        else:
            if (d3, d4) in D_3_4:
                z = (d1+15)*26**5 + (d2+8)*26**4 +                 (d5+13)*26**3 + (d6+4)*26**2 + (d8+9)*26**1 + (d11+9)*26**0
            else:
                z = (d1+15)*26**6 + (d2+8)*26**5 + (d4+6)**26**4 + (d5+13)*26**3 + (d6+4)*26**2 + (d8+9)*26**1 + (d11+9)*26**0
"""


def digit12(w, z):
    x = (z % 26) - 10
    # D_9_10 and D_7_8 and D_6_11 -> d5+3
    # D_9_10 and not D_7_8 and D_4_4 -> d6-6
    # D_9_10 and D_7_8 and not D_6_11 and D_3_4 -> d11-1
    # not D_9_10 and D_10_11 and D_7_8 and D_3_4 -> d6-6
    z = z // 26
    x = 0 if x == w else 1
    y = 25 * x + 1
    z *= y
    y = (w + 6) * x
    z += y
    return z


"""
if (d9, d10) in D_9_10:
    if (d7, d8) in D_7_8:
        if (d6, d11) in D_6_11:
            if (d5, d12) in D_5_12:
                if (d3, d4) in D_3_4:
                    z = (d1+15)*26**1 + (d2+8)*26**0
                else:
                    z = (d1+15)*26**2 + (d2+8)*26**1 + (d4+6)**26**0
            else:
                if (d3, d4) in D_3_4:
                    z = (d1+15)*26**2 + (d2+8)*26**1 +                 (d12+6)*26**0
                else:
                    # invalid
                    z = (d1+15)*26**3 + (d2+8)*26**2 + (d4+6)**26**1 + (d12+6)*26**0
        else:
            if (d3, d4) in D_3_4:
                if (d11, d12) in D_11_12:
                    z = (d1+15)*26**2 + (d2+8)*26**1 +                 (d5+13)*26**0
                else:
                    # invalid
                    z = (d1+15)*26**3 + (d2+8)*26**2 +                 (d5+13)*26**1 + (d12+6)*26**0
    else:
        if (d8, d11) in D_8_11:
            if (d3, d4) in D_3_4:
                if (d6, d12) in D_6_12:
                    z = (d1+15)*26**2 + (d2+8)*26**1 +                 (d5+13)*26**0
                else:
                    # invalid
                    z = (d1+15)*26**3 + (d2+8)*26**2 +                 (d5+13)*26**1 + (d12+6)*26**0
else:
    if (d10, d11) in D_10_11:
        if (d7, d8) in D_7_8:
            if (d3, d4) in D_3_4:
                if (d6, d12) in D_6_12:
                    z = (d1+15)*26**2 + (d2+8)*26**1 +                 (d5+13)*26**0
                else:
                    # invalid
                    z = (d1+15)*26**3 + (d2+8)*26**2 +                 (d5+13)*26**1 + (d12+6)*26**0
"""


def digit13(w, z):
    x = (z % 26) - 1
    # D_9_10 and D_7_8 and D_6_11 and D_5_12 and D_3_4 -> d2 + 7
    # D_9_10 and D_7_8 and D_6_11 and D_5_12 and not D_3_4 -> d4 + 5
    # D_9_10 and D_7_8 and D_6_11 and not D_5_12 and D_3_4 -> d12 + 5
    z = z // 26
    x = 0 if x == w else 1
    y = 25 * x + 1
    z *= y
    y = (w + 2) * x
    z += y
    return z  # 11 + d13


"""
if (d9, d10) in D_9_10:
    if (d7, d8) in D_7_8:
        if (d6, d11) in D_6_11:
            if (d5, d12) in D_5_12:
                if (d3, d4) in D_3_4:
                    if (d2, d13) in D_2_13:
                        z = (d1+15)*26**0
                    else:
                        z = (d1+15)*26**1 + (d13+2)*26**0
                else:
                    if (d4, d13) in D_4_13:
                        z = (d1+15)*26**1 + (d2+8)*26**0
            else:
                if (d3, d4) in D_3_4:
                    if (d12, d13) in D_12_13:
                        z = (d1+15)*26**1 + (d2+8)*26**0
"""


def digit14(w, z):
    x = (z % 26) - 11  # d1 + 4  # z < 26 -> x < 15 as x == w -> w + 11 = z -> z = d13 + 11
    z = z // 26  # z = 0 -> z < 26
    x = 0 if x == w else 1  # d14 == d1 + 4
    y = 25 * x + 1
    z *= y  # z + 1 = 0 or z * 26 = 0 -> z = 0
    y = (w + 2) * x  # y = 0 -> x = 0
    z += y
    return z  # 0


D_8_11 = ((4, 1), (5, 2), (6, 3), (7, 4), (8, 5), (9, 6))
D_10_11 = ((1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9))

D_11_12 = ((9, 8), (8, 7), (7, 6), (6, 5), (5, 4), (4, 3), (3, 2), (2, 1))
D_6_12 = ((9, 3), (8, 2), (7, 1))

D_4_13 = ((1, 6), (2, 7), (3, 8), (4, 9))
D_12_13 = ((1, 6), (2, 7), (3, 8), (4, 9))

D_9_10 = ((3, 1), (4, 2), (5, 3), (6, 4), (7, 5), (8, 6), (9, 7))
D_7_8 = ((5, 1), (6, 2), (7, 3), (8, 4), (9, 5))
D_6_11 = ((9, 1),)
D_5_12 = ((1, 4), (2, 5), (3, 6), (4, 7), (5, 8), (6, 9))
D_3_4 = ((9, 2), (8, 1))
D_2_13 = ((1, 8), (2, 9))
D_1_14 = ((1, 5), (2, 6), (3, 7), (4, 8), (5, 9))

"""
  1  2  3  4  5  6  7  8  9 10 11 12 13 14

  5  2  9  2  6  9  9  5  9  7  1  9  9  9

  1  1  8  1  1  9  5  1  3  1  1  4  8  5
"""

print("Part 1: 52926995971999")
print("Part 2: 11811951311485")
